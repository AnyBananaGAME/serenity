import { Rotation, Vector3f } from "@serenityjs/protocol";

import { Dimension } from "../world";
import { EntityIdentifier } from "../enums";
import { EntityProperties } from "../types";
import { Serenity } from "../serenity";

import { EntityType } from "./identity";
import { EntityTrait } from "./traits";

type JSONValue = string | number | boolean | JSONObject | JSONArray;
interface JSONObject {
  [key: string]: JSONValue;
}
type JSONArray = Array<JSONValue>;

class Entity {
  /**
   * The running total of entities that have been created
   */
  public static runtimeId = 0n;

  /**
   * The serenity instance of the server
   */
  protected readonly serenity: Serenity;

  /**
   * The type of the entity. (Identifier, NetworkId, etc)
   */
  public readonly type: EntityType;

  /**
   * The current runtime id of the entity. (Incremented each time an entity is created)
   */
  public readonly runtimeId = ++Entity.runtimeId;

  /**
   * The unique id of the entity. (Generated by the server, and exists for the lifetime of the entity)
   */
  public readonly uniqueId: bigint;

  /**
   * The current position of the entity
   */
  public readonly position = new Vector3f(0, 0, 0);

  /**
   * The current velocity of the entity
   */
  public readonly velocity = new Vector3f(0, 0, 0);

  /**
   * The current rotation of the entity
   */
  public readonly rotation = new Rotation(0, 0, 0);

  /**
   * The traits that are attached to the entity
   */
  public readonly traits = new Map<string, EntityTrait>();

  public readonly components = new Map<string, JSONValue>();

  /**
   * The current dimension of the entity.
   * This should not be dynamically changed, but instead use the `teleport` method.
   */
  public dimension: Dimension;

  /**
   * Creates a new entity within a dimension.
   * @param dimension The dimension to create the entity in
   * @param type The type of the entity to create
   * @param properties Additional properties to assign to the entity
   */
  public constructor(
    dimension: Dimension,
    type: EntityType | EntityIdentifier,
    properties?: Partial<EntityProperties>
  ) {
    // Assign the serenity instance to the entity
    this.serenity = dimension.world.serenity;

    // Assign the dimension and type to the entity
    this.dimension = dimension;
    this.type =
      type instanceof EntityType ? type : (EntityType.get(type) as EntityType);

    // Assign the properties to the entity
    // If a provided unique id is not given, generate one
    this.uniqueId = !properties?.uniqueId
      ? Entity.createUniqueId(this.type.network, this.runtimeId)
      : properties.uniqueId;
  }

  /**
   * Creates a new unique id for the entity.
   * @param network The network id of the entity type
   * @param runtimeId The current runtime id of the entity
   * @returns A generated unique id for the entity
   */
  public static createUniqueId(network: number, runtimeId: bigint): bigint {
    // Generate a unique id for the entity
    const unique = BigInt(Math.abs(Date.now() >> 4) & 0x1_ff);

    return BigInt(network << 19) | (unique << 10n) | runtimeId;
  }
}

export { Entity };
