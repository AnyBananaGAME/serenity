import { Rotation, Vector3f } from "@serenityjs/protocol";

import { Dimension, World } from "../world";
import { EntityIdentifier } from "../enums";
import { EntityEntry, EntityProperties, JSONLikeValue } from "../types";
import { Serenity } from "../serenity";
import { Chunk } from "../world/chunk";

import { EntityType } from "./identity";
import { EntityTrait } from "./traits";
import { Player } from "./player";
import { MetadataMap, ActorFlagMap, AttributeMap } from "./maps";

class Entity {
  /**
   * The running total of entities that have been created
   */
  public static runtimeId = 0n;

  /**
   * The serenity instance of the server
   */
  protected readonly serenity: Serenity;

  /**
   * The type of the entity. (Identifier, NetworkId, etc)
   */
  public readonly type: EntityType;

  /**
   * The current runtime id of the entity. (Incremented each time an entity is created)
   */
  public readonly runtimeId = ++Entity.runtimeId;

  /**
   * The unique id of the entity. (Generated by the server, and exists for the lifetime of the entity)
   */
  public readonly uniqueId: bigint;

  /**
   * The current position of the entity
   */
  public readonly position = new Vector3f(0, 0, 0);

  /**
   * The current velocity of the entity
   */
  public readonly velocity = new Vector3f(0, 0, 0);

  /**
   * The current rotation of the entity
   */
  public readonly rotation = new Rotation(0, 0, 0);

  /**
   * The traits that are attached to the entity
   */
  public readonly traits = new Map<string, EntityTrait>();

  /**
   * The components that are attached to the entity
   */
  public readonly components = new Map<string, JSONLikeValue>();

  /**
   * The metadata that is attached to the entity
   * These values are derived from the components and traits of the entity
   */
  public readonly metadata = new MetadataMap(this);

  /**
   * The flags that are attached to the entity
   * These values are derived from the components and traits of the entity
   */
  public readonly flags = new ActorFlagMap(this);

  /**
   * The attributes that are attached to the entity
   * These values are derived from the components and traits of the entity
   */
  public readonly attributes = new AttributeMap(this);

  /**
   * The current dimension of the entity.
   * This should not be dynamically changed, but instead use the `teleport` method.
   */
  public dimension: Dimension;

  /**
   * Whether the entity is alive or not.
   */
  public isAlive = false;

  /**
   * Whether the entity is on the ground or not.
   */
  public onGround = false;

  /**
   * Creates a new entity within a dimension.
   * @param dimension The dimension to create the entity in
   * @param type The type of the entity to create
   * @param properties Additional properties to assign to the entity
   */
  public constructor(
    dimension: Dimension,
    type: EntityType | EntityIdentifier,
    properties?: Partial<EntityProperties>
  ) {
    // Assign the serenity instance to the entity
    this.serenity = dimension.world.serenity;

    // Assign the dimension and type to the entity
    this.dimension = dimension;
    this.type =
      type instanceof EntityType ? type : (EntityType.get(type) as EntityType);

    // Assign the properties to the entity
    // If a provided unique id is not given, generate one
    this.uniqueId = !properties?.uniqueId
      ? Entity.createUniqueId(this.type.network, this.runtimeId)
      : properties.uniqueId;

    // If the entity is not a player
    if (!this.isPlayer()) {
      // If the entity properties contains an entry, load it
      if (properties?.entry) this.load(properties.entry);

      // Get the traits for the entity
      const traits = dimension.world.entityPalette.getRegistryFor(
        this.type.identifier
      );

      // Register the traits to the entity
      for (const trait of traits) this.addTrait(trait);
    }
  }

  /**
   * Checks if the entity is a player.
   * @returns Whether or not the entity is a player.
   */
  public isPlayer(): this is Player {
    return this.type.identifier === EntityIdentifier.Player;
  }

  /**
   * Whether the entity has the specified trait.
   * @param trait The trait to check for
   * @returns Whether the entity has the trait
   */
  public hasTrait(trait: string | typeof EntityTrait): boolean {
    return this.traits.has(
      typeof trait === "string" ? trait : trait.identifier
    );
  }

  /**
   * Gets the specified trait from the entity.
   * @param trait The trait to get from the entity
   * @returns The trait if it exists, otherwise null
   */
  public getTrait<T extends typeof EntityTrait>(trait: T): InstanceType<T>;

  /**
   * Gets the specified trait from the entity.
   * @param trait The trait to get from the entity
   * @returns The trait if it exists, otherwise null
   */
  public getTrait(trait: string): EntityTrait | null;

  /**
   * Gets the specified trait from the entity.
   * @param trait The trait to get from the entity
   * @returns The trait if it exists, otherwise null
   */
  public getTrait(trait: string | typeof EntityTrait): EntityTrait | null {
    return this.traits.get(
      typeof trait === "string" ? trait : trait.identifier
    ) as EntityTrait | null;
  }

  /**
   * Removes the specified trait from the entity.
   * @param trait The trait to remove
   */
  public removeTrait(trait: string | typeof EntityTrait): void {
    this.traits.delete(typeof trait === "string" ? trait : trait.identifier);
  }

  /**
   * Adds a trait to the entity.
   * @param trait The trait to add
   * @returns The trait that was added
   */
  public addTrait(trait: typeof EntityTrait): void {
    // Check if the trait already exists
    if (this.traits.has(trait.identifier)) return;

    // Check if the trait is in the palette
    if (!this.getWorld().entityPalette.traits.has(trait.identifier))
      this.getWorld().logger.warn(
        `Trait "§c${trait.identifier}§r" was added to entity "§d${this.type.identifier}§r:§d${this.uniqueId}§r" in dimension "§a${this.dimension.identifier}§r" but does not exist in the palette. This may result in a deserilization error.`
      );

    // Attempt to add the trait to the entity
    try {
      // Create a new instance of the trait
      new trait(this);
    } catch (reason) {
      // Log the error to the console
      this.serenity.logger.error(
        `Failed to add trait "${trait.identifier}" to entity "${this.type.identifier}:${this.uniqueId}" in dimension "${this.dimension.identifier}"`,
        reason
      );
    }
  }

  /**
   * Gets the world the entity is currently in.
   * @returns The world the entity is in
   */
  public getWorld(): World {
    return this.dimension.world;
  }

  /**
   * Gets the chunk the entity is currently in.
   * @returns The chunk the entity is in
   */
  public getChunk(): Chunk {
    // Convert the position to a chunk position
    const cx = this.position.x >> 4;
    const cz = this.position.z >> 4;

    // Get the chunk from the dimension
    return this.dimension.getChunk(cx, cz);
  }

  /**
   * Spawns the entity into the dimension.
   */
  public spawn(): void {
    // Add the entity to the dimension
    this.dimension.entities.set(this.uniqueId, this);

    // Set the entity as alive
    this.isAlive = true;

    // Trigger the entity onSpawn trait event
    for (const trait of this.traits.values()) {
      // Attempt to trigger the onSpawn trait event
      try {
        // Call the onSpawn trait event
        trait.onSpawn?.();
      } catch (reason) {
        // Log the error to the console
        this.serenity.logger.error(
          `Failed to trigger onSpawn trait event for entity "${this.type.identifier}:${this.uniqueId}" in dimension "${this.dimension.identifier}"`,
          reason
        );

        // Remove the trait from the entity
        this.traits.delete(trait.identifier);
      }
    }

    // Update the entity actor data & attributes
    this.metadata.update();
    this.attributes.update();
  }

  /**
   * Despawns the entity from the dimension.
   */
  public despawn(): void {
    // Set the entity as not alive
    this.isAlive = false;

    // Remove the entity from the dimension
    this.dimension.entities.delete(this.uniqueId);

    // Trigger the entity onDespawn trait event
    for (const trait of this.traits.values()) {
      // Attempt to trigger the onDespawn trait event
      try {
        // Call the onDespawn trait event
        trait.onDespawn?.();
      } catch (reason) {
        // Log the error to the console
        this.serenity.logger.error(
          `Failed to trigger onDespawn trait event for entity "${this.type.identifier}:${this.uniqueId}" in dimension "${this.dimension.identifier}"`,
          reason
        );

        // Remove the trait from the entity
        this.traits.delete(trait.identifier);
      }
    }
  }

  /**
   * Saves the entity to the current provider of the world the entity is in.
   */
  public save(): void {
    // Get the provider of the dimension
    const provider = this.dimension.world.provider;

    // Create the entity entry to save
    const entry: EntityEntry = {
      uniqueId: this.uniqueId,
      identifier: this.type.identifier,
      position: this.position,
      rotation: this.rotation,
      components: [...this.components.entries()],
      traits: [...this.traits.keys()],
      metadata: [...this.metadata.entries()],
      flags: [...this.flags.entries()],
      attributes: [...this.attributes.entries()]
    };

    // Write the entity to the provider
    provider.writeEntity(entry, this.dimension);
  }

  /**
   * Loads the entity from the provided entity entry.
   * @param entry The entity entry to load
   * @param overwrite Whether to overwrite the current entity data; default is true
   */
  public load(entry: EntityEntry, overwrite = true): void {
    // Check that the unique id matches the entity's unique id
    if (entry.uniqueId !== this.uniqueId)
      throw new Error(
        "Failed to load entity entry as the unique id does not match the entity's unique id!"
      );

    // Check that the identifier matches the entity's identifier
    if (entry.identifier !== this.type.identifier)
      throw new Error(
        "Failed to load entity entry as the identifier does not match the entity's identifier!"
      );

    // Set the entity's position and rotation
    this.position.set(entry.position);
    this.rotation.set(entry.rotation);

    // Check if the entity should overwrite the current data
    if (overwrite) {
      this.components.clear();
      this.traits.clear();
    }

    // Add the components to the entity, if it does not already exist
    for (const [key, value] of entry.components) {
      if (!this.components.has(key)) this.components.set(key, value);
    }

    // Add the traits to the entity, if it does not already exist
    for (const trait of entry.traits) {
      // Check if the palette has the trait
      const traitType = this.dimension.world.entityPalette.traits.get(trait);

      // Check if the trait exists in the palette
      if (!traitType) {
        this.serenity.logger.error(
          `Failed to load trait "${trait}" for entity "${this.type.identifier}:${this.uniqueId}" in dimension "${this.dimension.identifier}" as it does not exist in the palette`
        );

        continue;
      }

      // Attempt to add the trait to the entity
      this.addTrait(traitType);
    }

    // Add the metadata to the entity, if it does not already exist
    for (const [key, value] of entry.metadata) {
      if (!this.metadata.has(key)) this.metadata.set(key, value);
    }

    // Add the flags to the entity, if it does not already exist
    for (const [key, value] of entry.flags) {
      if (!this.flags.has(key)) this.flags.set(key, value);
    }

    // Add the attributes to the entity, if it does not already exist
    for (const [key, value] of entry.attributes) {
      if (!this.attributes.has(key)) this.attributes.set(key, value);
    }
  }

  /**
   * Creates a new unique id for the entity.
   * @param network The network id of the entity type
   * @param runtimeId The current runtime id of the entity
   * @returns A generated unique id for the entity
   */
  public static createUniqueId(network: number, runtimeId: bigint): bigint {
    // Generate a unique id for the entity
    const unique = BigInt(Math.abs(Date.now() >> 4) & 0x1_ff);

    return BigInt(network << 19) | (unique << 10n) | runtimeId;
  }
}

export { Entity };
