import { resolve } from "node:path";
import { writeFileSync } from "node:fs";

import { ITEM_TYPES, BLOCK_TYPES } from "@serenityjs/data";

const enums = resolve(__dirname, "../src/enums");
const types = resolve(__dirname, "../src/types");

let ItemTypesFile = `// WARNING, DO NOT EDIT!\n// This file is automatically generated on start up.\n\n`;

ItemTypesFile += `export enum ItemIdentifier {\n`;

for (const type of ITEM_TYPES) {
	// TitleCase the identifier.
	const name = type.identifier
		.split(":")[1]
		?.split("_")
		.map((word) => word[0]?.toUpperCase() + word.slice(1))
		.join("");

	ItemTypesFile += `	${name} = "${type.identifier}",\n`;
}

ItemTypesFile += `}\n`;

writeFileSync(resolve(enums, "identifier.ts"), ItemTypesFile);

let ItemToBlockFile = `// WARNING, DO NOT EDIT!\n// This file is automatically generated on start up.\n\n`;

ItemToBlockFile += `import type { BlockIdentifier, BlockType } from "@serenityjs/block";\n`;
ItemToBlockFile += `import type { ItemIdentifier } from "../enums/identifier";\n\n`;

ItemToBlockFile += `export interface Items {\n`;

for (const type of ITEM_TYPES) {
	// TitleCase the identifier.
	const name = type.identifier
		.split(":")[1]
		?.split("_")
		.map((word) => word[0]?.toUpperCase() + word.slice(1))
		.join("");

	// Check if the item has a block equivalent.
	const block = BLOCK_TYPES.find(
		(block) => block.identifier === type.identifier
	);

	// Append the item to block mapping.
	ItemToBlockFile += block
		? `	[ItemIdentifier.${name}]: BlockType<BlockIdentifier.${name}>;\n`
		: `	[ItemIdentifier.${name}]: null;\n`;
}

ItemToBlockFile += `}\n`;

writeFileSync(resolve(types, "items.ts"), ItemToBlockFile);
